<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:h="http://java.sun.com/jsf/html"
      xmlns:c="http://java.sun.com/jsp/jstl/core"
      xmlns:ui="http://java.sun.com/jsf/facelets"
      xmlns:p="http://primefaces.org/ui"
>
<h:body>
    <ui:composition template="/template/commonLayout.xhtml">
        <ui:define name="content">
            <h:form id="formId">
                <h:panelGrid columns="2">
                    <p:outputLabel value="Name: " style="font-weight:bold"/>
                    <p:inputText value="#{addEventBean.newEvent.name}"/>

                    <p:outputLabel for="fromDate" value="From: " />
                    <p:calendar id="fromDate" value="#{addEventBean.fromDate}" pattern="dd.mm.yyyy HH:mm" mask="true"/>

                    <p:outputLabel for="toDate" value="To: " />
                    <p:calendar id="toDate" value="#{addEventBean.toDate}" pattern="dd.mm.yyyy HH:mm" mask="true"/>

                    <p:outputLabel value="Description: " style="font-weight:bold"/>
                    <p:inputText value="#{addEventBean.newEvent.description}"/>

                    <p:outputLabel value="Price: " style="font-weight:bold"/>
                    <p:inputNumber id="input1" value="#{addEventBean.newEvent.price}"/>
                </h:panelGrid>


                <input id="pac-input" class="controls" type="text" placeholder="Search Box"/>
                <div id="map"/>

                <input id="basics"/>
                <h:inputHidden id="profileId" value="#{addEventBean.profileId}"/>
                <h:inputHidden id="profileFullname" value="#{addEventBean.fullname}"/>

                <h:commandButton id="hdnBtn" action="#{addEventBean.doAThing}" style="display: none;"/>

                <c:forEach var="invited" items="#{addEventBean.invited}">
                    <h:outputText value="#{invited.firstname}"/>
                    <h:outputText value=" "/>
                    <h:outputText value="#{invited.lastname}"/>
                    <br/>
                </c:forEach>

                <h:commandButton value="Save" onclick="getVars()" action="#{addEventBean.submit}"/>

                <h:inputHidden id="lat" value="#{addEventBean.newEvent.latitude}"/>
                <h:inputHidden id="lng" value="#{addEventBean.newEvent.longitude}"/>
            </h:form>
            <h:outputScript>
                var marker = null;

                function myMap() {
                    var myCenter = new google.maps.LatLng(46.947985, 7.446540);
                    var mapCanvas = document.getElementById("map");
                    var mapOptions = {
                        center: myCenter,
                        disableDefaultUI: true,
                        zoom: 9,
                        mapTypeId: google.maps.MapTypeId.ROADMAP
                    };
                    var map = new google.maps.Map(mapCanvas, mapOptions);

                    google.maps.event.addListener(map, 'click', function (event) {
                        placeMarker(map, event.latLng);
                    });

                    // Create the search box and link it to the UI element.
                    var input = document.getElementById('pac-input');
                    var searchBox = new google.maps.places.SearchBox(input);
                    map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);

                    // Bias the SearchBox results towards current map's viewport.
                    map.addListener('bounds_changed', function () {
                        searchBox.setBounds(map.getBounds());
                    });


                    searchBox.addListener('places_changed', function () {
                        var places = searchBox.getPlaces();

                        if (places.length == 0) {
                            return;
                        }

                        // For each place, get the icon, name and location.
                        var bounds = new google.maps.LatLngBounds();
                        places.forEach(function (place) {
                            if (!place.geometry) {
                                console.log("Returned place contains no geometry");
                                return;
                            }

                            if (marker) {
                                marker.setPosition(place.geometry.location)
                            } else {
                                marker = new google.maps.Marker({
                                    position: place.geometry.location,
                                    animation: google.maps.Animation.DROP,
                                    map: map
                                });
                            }
                            getVars(marker.getPosition());

                            if (place.geometry.viewport) {
                                // Only geocodes have viewport.
                                bounds.union(place.geometry.viewport);
                            } else {
                                bounds.extend(place.geometry.location);
                            }
                        });
                        map.fitBounds(bounds);
                    });
                }

                function placeMarker(map, location) {
                    if (marker) {
                        marker.setPosition(location)
                    } else {
                        marker = new google.maps.Marker({
                            position: location,
                            animation: google.maps.Animation.DROP,
                            map: map
                        });
                    }
                    getVars(marker.getPosition());
                }

                function getVars(locationInfo) {
                    document.getElementById("formId:lng").value = locationInfo.lng().toFixed(6);
                    document.getElementById("formId:lat").value = locationInfo.lat().toFixed(6);
                }

            </h:outputScript>

            <h:outputScript>
                var options = {
                data: [

                <c:forEach var="person" items="#{addEventBean.profiles}">
                    {
                    "id": #{person.id},
                    "name": "#{person.firstname.concat(" ").concat(person.lastname)}",
                    "username": "#{person.username}"
                    },
                </c:forEach>],

                getValue: "name",

                template: {
                type: "description",
                fields: {
                description: "username"
                }
                },

                list: {
                match: {
                enabled: true
                },

                sort: {
                enabled: true
                },

                showAnimation: {
                type: "fade",
                time: 400,
                callback: function () {
                }
                },

                hideAnimation: {
                type: "slide",
                time: 400,
                callback: function () {
                }
                },
                onChooseEvent: function () {
                var search = $("#basics").getSelectedItemData();
                document.getElementById("formId:profileId").value = search.id;
                document.getElementById("formId:profileFullname").value = search.name;
                document.getElementById("formId:hdnBtn").click();
                }
                },

                placeholder: "Search User",
                theme: "round"

                };

                $("#basics").easyAutocomplete(options);
            </h:outputScript>

            <script type="text/javascript"
                    src="https://maps.googleapis.com/maps/api/js?key=AIzaSyCVG5bffPnxRZkGFq9x7rpMl9PHEFCpAQs&amp;libraries=places&amp;callback=myMap"/>
        </ui:define>
    </ui:composition>
</h:body>

</html>